#+title: Progress in Project
#+author: satiscugcat

* Overarching Progress : TODOs and DONEs
** DONE Implement the definitions for the three notions on page 12 of the paper
   CLOSED: [2025-04-08 Tue 23:34]
*** DONE Implement SubProof relation
    CLOSED: [2025-04-06 Sun 05:08]
*** DONE Implement terms set definition
    CLOSED: [2025-04-08 Tue 22:58]
*** DONE Implement lists(TermSet) set definition
    CLOSED: [2025-04-08 Tue 22:58]
*** DONE Implement lists(proof) set definition
    CLOSED: [2025-04-08 Tue 23:34]
** TODO Normalisation and Subterm Property
*** DONE Defining Consistency
    CLOSED: [2025-04-30 Wed 01:56]
*** DONE Formalising Normalisation and Subterm Property theorem definitions
    CLOSED: [2025-04-16 Wed 10:35]
*** TODO Proving Normalisation
**** DONE Defining Rule Transformation Function for dy proofs
     CLOSED: [2025-05-19 Mon 09:18]
**** TODO Proving its Correctness
**** TODO Defining Rule Transformation Function for eq ady proofs
**** TODO Proving its Correctness (/ proving correctness using it)
*** TODO Proving Subterm Property
* Daily Description of Work Done
** April Week 2
   + 06/04/2025 - Implementing SubProof definitions
     * Managed to write down the definition for the subproof relation on \vert-_eq proofs.
     * Entering a new line after this definition causes EMACS to lag, regardless of whether there is an ongoing coq process. The problem doesn't seem to occur if I include a dummy statement. But this is strange and I have no idea why this is happening. Thankfully there is a hacky workaround for now, since I don't want to switch from EMACS. It might help to modularise some of the definitions.
   + 08-09/04/25 - Implementing the rest, mostly just straightforward work.
** April Week 3
  I've been sick and tired this week, mostly because of the change in weather, thus I haven't been able to work for the most part.
  + 16-18/04/25 - Trying to formalise consistency, realised flaw in system while doing so. Currently the way I have defined terms with variables does not allow /names/ to be variables. Which is bad. I also realised the same is true with existentials. Currently thinking of how to resolve this. 
** April Week 4
   Rewrote the code to fix the issue with variables, redefined the way existentials were being used to match the paper (ie. not using a function, but an assertion directly).
   A new type Key was added, and Var has been written to be a disjoint union of KeyVar and TermVar. Encryption terms now use "Keys", which can be either public, private, or variable.

   Added a notion of a substitution being "Concrete" too, which essentially states that after a substitution, there should be no free variables left in the result of that substitution.

   Lastly, consistency has been formalised.

** May Week 2
   Rewrote the code to not use "foldEqAdyProof", as that was making the proof very complicated, will be trying to phase out all other general "fold"s too.

   Currently trying to write down the rule transformation function, since as far as I could understand, it is recursively called to transform the whole proof into an appropriate form. To do this I'm also trying to write and prove correct a function that does this for dy proofs.
